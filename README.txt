Organizador de Arquivos Autom√°tico em Python

üìù Descri√ß√£o

Este √© um script em Python desenvolvido para automatizar a organiza√ß√£o de arquivos em um diret√≥rio espec√≠fico. Ele analisa todos os arquivos de uma pasta (como a de "Downloads", por exemplo) e os move para subpastas nomeadas de acordo com suas extens√µes. O objetivo √© transformar uma pasta desorganizada em um ambiente estruturado de forma r√°pida e eficiente.

‚ú® Funcionalidades

- An√°lise de Diret√≥rio: O script l√™ todos os itens de uma pasta de origem especificada pelo usu√°rio.
- Cria√ß√£o de Subpastas: Cria automaticamente pastas com base nas extens√µes dos arquivos encontrados (ex: 'pdf', 'jpg', 'docx').
- Movimenta√ß√£o de Arquivos: Move cada arquivo para a subpasta correspondente √† sua extens√£o.
- Tratamento de Exce√ß√µes: Ignora subdiret√≥rios j√° existentes na pasta de origem e lida com arquivos que n√£o possuem extens√£o, movendo-os para uma pasta 'outros'.

‚öôÔ∏è Como Funciona

O script utiliza as bibliotecas padr√£o do Python `os` e `shutil`. A l√≥gica principal √© a seguinte:
1.  Solicita ao usu√°rio o caminho completo da pasta a ser organizada.
2.  Lista todos os itens no diret√≥rio.
3.  Para cada item, verifica se √© um arquivo.
4.  Extrai a extens√£o do arquivo (ex: `.png` se torna `png`).
5.  Verifica se j√° existe uma subpasta com o nome da extens√£o. Se n√£o, ela √© criada.
6.  Move o arquivo da pasta de origem para a pasta de destino correta.

üöÄ Como Usar

1.  Clone ou baixe este reposit√≥rio:
    ```bash
    git clone https:https://github.com/gabrielvieira-dev0/Organizador-de-arquivos-Python.git
    ```
2.  Navegue at√© a pasta do projeto:
    ```bash
    cd nome-da-pasta-do-projeto
    ```
3.  Execute o script pelo terminal:
    ```bash
    python organizador.py
    ```
4.  Informe o caminho: Quando solicitado, cole o caminho completo da pasta que voc√™ deseja organizar e pressione Enter.

Aten√ß√£o: Recomenda-se testar o script em uma pasta de exemplo antes de us√°-lo em diret√≥rios importantes.

üõ†Ô∏è Tecnologias Utilizadas

- Python 3.12
- Bibliotecas Padr√£o:
  - `os`: Para interagir com o sistema operacional (listar diret√≥rios, criar pastas).
  - `shutil`: Para realizar opera√ß√µes de alto n√≠vel com arquivos (mover arquivos).

üß† O que aprendi com este projeto

Desenvolver este script foi uma √≥tima oportunidade para solidificar conceitos importantes:

- Manipula√ß√£o de Arquivos e Diret√≥rios: Aprofundei meus conhecimentos sobre como o Python pode interagir com o sistema de arquivos, usando fun√ß√µes como `os.listdir()`, `os.path.join()`, `os.path.splitext()`, `os.makedirs()` e `shutil.move()`.

- L√≥gica de Programa√ß√£o Estruturada: Pratiquei o uso de la√ßos (`for`), condicionais (`if/else`) e tratamento de erros b√°sicos para construir um fluxo de execu√ß√£o robusto e previs√≠vel.
- Import√¢ncia das Bibliotecas Padr√£o: Percebi o qu√£o poderosa √© a biblioteca padr√£o do Python, capaz de resolver problemas reais e complexos sem a necessidade de instalar pacotes externos.
- Desenvolvimento Orientado a Problemas: Aprendi a identificar um problema do dia a dia e traduzi-lo em uma solu√ß√£o de software funcional, desde a concep√ß√£o da ideia at√© a implementa√ß√£o do c√≥digo.
